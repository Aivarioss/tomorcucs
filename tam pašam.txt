<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Token Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-image: url('back.png');
            background-size: cover;
            background-position: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: 'Roboto', sans-serif;
        }

        .game-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 90%;
            max-width: 600px;
        }

        .circle-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px;
            text-align: center;
        }

        .circle {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: white;
            cursor: pointer;
            transition: transform 0.3s ease, background 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            margin: 10px 0;
            overflow: hidden;
        }

        .circle img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
        }

        .circle .text {
            position: absolute;
            font-size: 24px;
            color: white;
            text-shadow: 2px 2px 4px black;
            font-weight: bold;
        }

        .points, .burnt-points, .timer, .status {
            background: rgba(255, 255, 255, 0.9);
            padding: 5px 10px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            z-index: 1;
            display: inline-block;
            margin: 5px 0;
        }

        .status {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: none;
        }

        #cucumberPoints {
            background-color: green;
            color: white;
        }

        #tomatoPoints {
            background-color: red;
            color: white;
        }

        #cucumberBurntPoints {
            background-color: darkgreen;
            color: white;
        }

        #tomatoBurntPoints {
            background-color: darkred;
            color: white;
        }

        .rotate-clockwise#tomato, .rotate-counterclockwise#tomato {
            background: radial-gradient(circle, lightcoral, red, darkred);
            box-shadow: 0 0 20px 10px rgba(255, 99, 71, 0.6);
        }

        .rotate-clockwise#cucumber, .rotate-counterclockwise#cucumber {
            background: radial-gradient(circle, lightgreen, green, darkgreen);
            box-shadow: 0 0 20px 10px rgba(0, 128, 0, 0.6);
        }

        .rotate-clockwise .text, .rotate-counterclockwise .text {
            display: none;
        }

        .rotate-clockwise {
            animation: spin-clockwise 1s linear infinite;
        }

        .rotate-counterclockwise {
            animation: spin-counterclockwise 1s linear infinite;
        }

        @keyframes spin-clockwise {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @keyframes spin-counterclockwise {
            from { transform: rotate(0deg); }
            to { transform: rotate(-360deg); }
        }

        @keyframes fall {
            0% { transform: translateY(-100px) translateX(0) scale(1); opacity: 1; }
            50% { transform: translateY(100px) translateX(20px) scale(0.8); opacity: 0.8; }
            100% { transform: translateY(200px) translateX(-10px) scale(0.6); opacity: 0; }
        }

        .falling {
            position: absolute;
            width: 100px;
            height: 100px;
            z-index: 0;
            animation: fall 2s linear;
        }

        @keyframes rise {
            0% { transform: translateY(100px) translateX(0) scale(0.6); opacity: 0; }
            50% { transform: translateY(-100px) translateX(-20px) scale(0.8); opacity: 0.8; }
            100% { transform: translateY(-200px) translateX(10px) scale(1); opacity: 1; }
        }

        .rising {
            position: absolute;
            width: 100px;
            height: 100px;
            z-index: 0;
            animation: rise 2s linear;
        }

        @media (min-width: 600px) {
            .game-container {
                flex-direction: row;
            }

            .circle {
                width: 150px;
                height: 150px;
            }

            .circle img {
                width: 100px;
                height: 100px;
            }

            .points, .timer, .burnt-points {
                font-size: 18px;
            }
        }

        @media (max-width: 600px) {
            .circle {
                width: 120px;
                height: 120px;
            }

            .circle img {
                width: 80px;
                height: 80px;
            }

            .points, .timer, .burnt-points {
                font-size: 14px;
            }
        }

        /* Boost Popup Styles */
        .boost-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            background-color: white;
            border: 2px solid black;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            z-index: 10;
            display: none;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            text-align: center;
        }

        .boost-popup h2 {
            margin-top: 0;
        }

        .boost-popup button {
            margin-top: 10px;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .boost-popup button:hover {
            background-color: #218838;
        }

        .boost-popup .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            width: 30px;
            height: 30px;
            font-size: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .boost-sub-section {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .boost-sub-section img {
            width: 30px;
            height: 30px;
            margin-right: 10px;
        }

        .boost-sub-section div {
            text-align: left;
        }

        .boost-sub-section div h3 {
            margin: 0;
            font-size: 16px;
        }

        .boost-sub-section div p {
            margin: 0;
            font-size: 14px;
        }

        /* Footer Tabs */
        .footer {
            position: fixed;
            bottom: 0;
            width: 100%;
            display: flex;
            justify-content: space-around;
            background-color: #333;
            padding: 10px 0;
        }

        .footer-tab {
            flex-grow: 1;
            text-align: center;
            color: white;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 0;
        }

        .footer-tab:hover {
            background-color: #444;
        }

        .footer-tab img {
            width: 24px;
            height: 24px;
            vertical-align: middle;
        }

        .footer-tab span {
            margin-left: 5px;
            vertical-align: middle;
        }

        /* Informational Modal Styles */
        .info-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            background-color: white;
            border: 2px solid black;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            z-index: 10;
            display: none;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            text-align: center;
        }

        .info-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            width: 30px;
            height: 30px;
            font-size: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .info-modal .accept-btn {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .info-modal .accept-btn:hover {
            background-color: #218838;
        }

        .info-modal .cost {
            font-size: 18px;
            font-weight: bold;
            margin-top: 10px;
        }

        .info-modal .cost.sufficient {
            color: black; /* Mainīta krāsa uz melnu */
        }

        .info-modal .cost.insufficient {
            color: red;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <!-- Cucumber token container -->
        <div class="circle-container">
            <div class="points" id="cucumberPoints">Total Points: 100</div>
            <div class="circle" id="cucumber">
                <span class="text">Push me</span>
                <img src="cuc.png" alt="Cucumber token">
            </div>
            <div class="burnt-points" id="cucumberBurntPoints">Burnt Points: 0</div>
            <div class="timer" id="cucumberTimer">00:01:00</div>
        </div>
        <!-- Tomato token container -->
        <div class="circle-container">
            <div class="points" id="tomatoPoints">Total Points: 100</div>
            <div class="circle" id="tomato">
                <span class="text">Push me</span>
                <img src="tom.png" alt="Tomato token">
            </div>
            <div class="burnt-points" id="tomatoBurntPoints">Burnt Points: 0</div>
            <div class="timer" id="tomatoTimer">00:01:00</div>
        </div>
        <div class="status" id="statusMessage">Game Over</div>
    </div>

    <!-- Boost Popup -->
    <div class="boost-popup" id="boostPopup">
        <button class="close-btn" onclick="closeBoostPopup()">X</button>
        <h2>Boost Activation</h2>
        <div class="boost-sub-section">
            <img src="tom.png" alt="Tom Icon">
            <div>
                <h3>Tom Boost</h3>
                <p id="tomBoostLevel">Level: 0</p>
                <button onclick="showTomBoostInfo()">Activate</button>
            </div>
        </div>
        <div class="boost-sub-section">
            <img src="cuc.png" alt="Cucumber Icon">
            <div>
                <h3>Cuc Boost</h3>
                <p id="cucBoostLevel">Level: 0</p>
                <button onclick="showCucBoostInfo()">Activate</button>
            </div>
        </div>
    </div>

    <!-- Informational Modal -->
    <div class="info-modal" id="infoModal">
        <button class="close-btn" onclick="closeInfoModal()">X</button>
        <p id="infoMessage"></p>
        <div id="costMessage" class="cost"></div>
        <button class="accept-btn" id="acceptBtn" onclick="acceptBoost()">Accept</button>
    </div>

    <!-- Footer Tabs -->
    <div class="footer">
        <div class="footer-tab" onclick="openRefTab()">
            <img src="ref_icon.png" alt="Ref">
            <span>Ref.</span>
        </div>
        <div class="footer-tab" onclick="openTaskTab()">
            <img src="task_icon.png" alt="Task">
            <span>Task</span>
        </div>
        <div class="footer-tab" onclick="openBoostPopup()">
            <img src="boost_icon.png" alt="Boost">
            <span>Boost</span>
        </div>
    </div>

    <script>
        let cucumberPoints = 100;
        let tomatoPoints = 100;
        let cucumberBurntPoints = 0;
        let tomatoBurntPoints = 0;
        let cucumberInterval, tomatoInterval;
        let cucumberDuration = 60; // Initial duration is 1 minute (60 seconds)
        let tomatoDuration = 60; // Initial duration is 1 minute (60 seconds)

        let tomBoost = 0; // Initial level
        let cucBoost = 0; // Initial level

        let tomBoostLevel = 0;
        let cucBoostLevel = 0;

        const boostLevelCosts = [100, 1000, 10000, 100000, 1000000];

        document.getElementById('cucumber').addEventListener('click', () => startRotation('cucumber'));
        document.getElementById('tomato').addEventListener('click', () => startRotation('tomato'));

        function formatTime(seconds) {
            const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
            const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
            const s = (seconds % 60).toString().padStart(2, '0');
            return `${h}:${m}:${s}`;
        }

        function showStatusMessage(message) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.style.display = 'block';
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 3000);
        }

        function createFallingImage(token) {
            const img = document.createElement('img');
            img.src = token === 'cucumber' ? 'cucb.png' : 'tomb.png';
            img.className = 'falling';
            document.body.appendChild(img);
            
            const tokenElement = document.getElementById(token);
            const rect = tokenElement.getBoundingClientRect();
            img.style.left = `${rect.left + rect.width / 2 - 50}px`;
            img.style.top = `${rect.top - 100}px`;

            img.addEventListener('animationend', () => {
                img.remove();
            });
        }

        function createRisingImage(token) {
            const img = document.createElement('img');
            img.src = token === 'cucumber' ? 'cucs.png' : 'toms.png';
            img.className = 'rising';
            document.body.appendChild(img);
            
            const tokenElement = document.getElementById(token);
            const rect = tokenElement.getBoundingClientRect();
            img.style.left = `${rect.left + rect.width / 2 - 50}px`;
            img.style.top = `${rect.top + 150}px`;

            img.addEventListener('animationend', () => {
                img.remove();
            });
        }

        function startRotation(token) {
            const otherToken = token === 'cucumber' ? 'tomato' : 'cucumber';
            const tokenElement = document.getElementById(token);
            const otherTokenElement = document.getElementById(otherToken);
            const timerElement = document.getElementById(token + 'Timer');
            let duration = token === 'cucumber' ? cucumberDuration : tomatoDuration;

            if ((token === 'cucumber' && tomatoPoints <= 0) || (token === 'tomato' && cucumberPoints <= 0)) {
                alert("Cannot start rotation: opponent has zero points.");
                return;
            }

            if (tokenElement.classList.contains('rotate-clockwise') || tokenElement.classList.contains('rotate-counterclockwise')) {
                return;
            }

            if (token === 'cucumber') {
                tokenElement.classList.add('rotate-clockwise');
                otherTokenElement.classList.add('rotate-counterclockwise');
            } else {
                tokenElement.classList.add('rotate-counterclockwise');
                otherTokenElement.classList.add('rotate-clockwise');
            }

            let pointsGained = 0;

            let interval = setInterval(() => {
                duration--;
                pointsGained++;

                if (token === 'cucumber') {
                    cucumberPoints += (1 + cucBoost); // Augmented with cucBoost
                    createRisingImage('cucumber');
                    if (pointsGained % 10 === 0) {
                        tomatoPoints -= 1;
                        cucumberBurntPoints += 1;
                        createFallingImage('tomato');
                        if (tomatoPoints < 0) {
                            tomatoPoints = 0;
                        }
                    }
                } else {
                    tomatoPoints += (1 + tomBoost); // Augmented with tomBoost
                    createRisingImage('tomato');
                    if (pointsGained % 10 === 0) {
                        cucumberPoints -= 1;
                        tomatoBurntPoints += 1;
                        createFallingImage('cucumber');
                        if (cucumberPoints < 0) {
                            cucumberPoints = 0;
                        }
                    }
                }

                document.getElementById('cucumberPoints').textContent = `Total Points: ${cucumberPoints}`;
                document.getElementById('tomatoPoints').textContent = `Total Points: ${tomatoPoints}`;
                document.getElementById('cucumberBurntPoints').textContent = `Burnt Points: ${cucumberBurntPoints}`;
                document.getElementById('tomatoBurntPoints').textContent = `Burnt Points: ${tomatoBurntPoints}`;
                timerElement.textContent = formatTime(duration);

                if (duration <= 0 || tomatoPoints <= 0 || cucumberPoints <= 0) {
                    clearInterval(interval);
                    tokenElement.classList.remove('rotate-clockwise');
                    tokenElement.classList.remove('rotate-counterclockwise');
                    otherTokenElement.classList.remove('rotate-counterclockwise');
                    otherTokenElement.classList.remove('rotate-clockwise');

                    if (duration <= 0) {
                        if (token === 'cucumber') {
                            cucumberDuration += 60;
                        } else {
                            tomatoDuration += 60;
                        }
                    }
                    timerElement.textContent = formatTime(token === 'cucumber' ? cucumberDuration : tomatoDuration);

                    if (tomatoPoints <= 0 || cucumberPoints <= 0) {
                        showStatusMessage("Game over: " + (tomatoPoints <= 0 ? "Tomato" : "Cucumber") + " has zero points.");
                    }
                }
            }, 1000);

            if (token === 'cucumber') {
                cucumberInterval = interval;
            } else {
                tomatoInterval = interval;
            }
        }

        function openBoostPopup() {
            document.getElementById('boostPopup').style.display = 'flex';
        }

        function closeBoostPopup() {
            document.getElementById('boostPopup').style.display = 'none';
        }

        function openInfoModal(message, costMessage, acceptCallback, sufficientFunds) {
            document.getElementById('infoMessage').textContent = message;
            const costElement = document.getElementById('costMessage');
            costElement.textContent = costMessage;
            costElement.classList.toggle('sufficient', sufficientFunds);
            costElement.classList.toggle('insufficient', !sufficientFunds);
            document.getElementById('acceptBtn').onclick = acceptCallback;
            document.getElementById('infoModal').style.display = 'flex';
        }

        function closeInfoModal() {
            document.getElementById('infoModal').style.display = 'none';
        }

        function showTomBoostInfo() {
            const nextLevel = tomBoostLevel + 1;
            if (nextLevel <= 5) {
                const cost = boostLevelCosts[tomBoostLevel];
                const sufficientFunds = tomatoBurntPoints >= cost;
                const costMessage = `Cost: ${cost} TOM burnt points`;
                openInfoModal(`Tom Boost Level ${nextLevel} gives +1 point per second and +1 burnt point per 10 points.`, costMessage, acceptTomBoost, sufficientFunds);
            } else {
                alert('Tom Boost has reached the maximum level.');
            }
        }

        function showCucBoostInfo() {
            const nextLevel = cucBoostLevel + 1;
            if (nextLevel <= 5) {
                const cost = boostLevelCosts[cucBoostLevel];
                const sufficientFunds = cucumberBurntPoints >= cost;
                const costMessage = `Cost: ${cost} CUC burnt points`;
                openInfoModal(`Cuc Boost Level ${nextLevel} gives +1 point per second and +1 burnt point per 10 points.`, costMessage, acceptCucBoost, sufficientFunds);
            } else {
                alert('Cuc Boost has reached the maximum level.');
            }
        }

        function acceptTomBoost() {
            const cost = boostLevelCosts[tomBoostLevel];
            if (tomatoBurntPoints >= cost) {
                tomatoBurntPoints -= cost;
                tomBoostLevel++;
                tomBoost++;
                updateLevels();
                closeInfoModal();
                alert(`Tom Boost Level ${tomBoostLevel} activated!`);
            } else {
                alert('Not enough TOM burnt points.');
            }
        }

        function acceptCucBoost() {
            const cost = boostLevelCosts[cucBoostLevel];
            if (cucumberBurntPoints >= cost) {
                cucumberBurntPoints -= cost;
                cucBoostLevel++;
                cucBoost++;
                updateLevels();
                closeInfoModal();
                alert(`Cuc Boost Level ${cucBoostLevel} activated!`);
            } else {
                alert('Not enough CUC burnt points.');
            }
        }

        function openRefTab() {
            alert('Ref. tab clicked');
        }

        function openTaskTab() {
            alert('Task tab clicked');
        }

        function updateLevels() {
            document.getElementById('tomBoostLevel').textContent = 'Level: ' + tomBoostLevel;
            document.getElementById('cucBoostLevel').textContent = 'Level: ' + cucBoostLevel;
            document.getElementById('cucumberBurntPoints').textContent = `Burnt Points: ${cucumberBurntPoints}`;
            document.getElementById('tomatoBurntPoints').textContent = `Burnt Points: ${tomatoBurntPoints}`;
            document.getElementById('cucumberPoints').textContent = `Total Points: ${cucumberPoints}`;
            document.getElementById('tomatoPoints').textContent = `Total Points: ${tomatoPoints}`;
        }
    </script>
</body>
</html>
